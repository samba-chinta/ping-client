import React, { useEffect, useRef, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { createPortal } from "react-dom";
import { Navigate } from "react-router-dom";

import styles from "../styles/page-styles/mfa.module.css";
import useApi from "../hooks/useRequest";
import Toast from "../components/UI/Toast";
import { authActions } from "../redux/auth-slice";

const MFA = (props) => {
    const dispatch = useDispatch();
    const auth = useSelector((state) => state.auth);
    const [isAllFieldEntered, setIsAllFieldEntered] = useState(true);
    const [mfaResponse, setMfaResponse] = useState();
    const [mfaError, setMfaError] = useState();
    const totpRef = useRef();

    const { response, error, postDataToApiHandler } = useApi();

    useEffect(() => {
        setTimeout(() => {
            setIsAllFieldEntered(true);
        }, 5000);
    }, [setIsAllFieldEntered]);


    const verifyFormSubmitHandler = async (e) => {
        e.preventDefault();

        const totp = totpRef.current.value;

        if (!totp) {
            setIsAllFieldEntered(false);
        } else {
            await postDataToApiHandler({
                url: "http://localhost:5000/auth/enable-mfa",
                data: {
                    username: auth.username,
                    token: auth.auth_token,
                    totp,
                }
            })
        }

        totpRef.current.value = '';
    }

    if (response) {
        localStorage.setItem('isMFAEnabled', true);
        dispatch(authActions.setMFA({
            isMFAEnabled: true,
        }))
    }

    useEffect(() => {
        const getResponseHandler = async () => {
            const res = await fetch(
                `http://localhost:5000/auth/generate-qr?token=${auth.auth_token}&username=${auth.username}`
            );
            if (!res.ok) {
                setMfaError(await res.json());
            } else {
                setMfaResponse(await res.json());
            }
        };
        getResponseHandler();
    }, [auth.username, auth.auth_token]);

    return (
        <div className={styles["mfa-page__wrapper"]}>
            <div className={styles["main-wrapper"]}>
                {!auth.isMFAEnabled && mfaResponse && (
                    <div className="container">
                        <div className="main-wrapper">
                            <div className="qr-wrapper">
                                <div className="qr-main">
                                    <img src={mfaResponse.qrURL} alt="QR" />
                                </div>
                            </div>
                            <div className="verify-form__wrapper">
                                <form onSubmit={verifyFormSubmitHandler}>
                                    <p className="important-notes">
                                        Scan the QR code using a Auth app
                                        (Example: Google Authenticator, Zoho
                                        OneAuth, Microsoft Authenticator) to add
                                        secret code in Auth App. Then enter the
                                        "Time-based One Time Password"(TOTP)
                                        generated by Auth App to verfiy and
                                        enable the MFA in your PING App.
                                    </p>
                                    <input
                                        type="text"
                                        placeholder="Enter the TOTP"
                                        name="totp"
                                        ref={totpRef}
                                    />
                                    <button type="submit">
                                        Verify and Enable MFA
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                )}
                {!auth.isMFAEnabled && mfaError && (
                    <p>Encounter an error, Try Again!!</p>
                )}
            </div>
            {!isAllFieldEntered &&
                createPortal(
                    <Toast
                        toastMessage="Please Enter all the fields"
                        className="failure"
                    />,
                    document.getElementById("toast")
                )}
            {response && <Navigate to="/" replace={true} />}
            {error &&
                createPortal(
                    <Toast
                        toastMessage={`${error?.message}`}
                        className="failure"
                    />,
                    document.getElementById("toast")
                )}
        </div>
    );
};

export default MFA;
